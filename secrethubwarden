#!/usr/bin/env bash

# secrethubwarden
#
# Copy secrets from Bitwarden to GitHub repository secrets
#
# Source: https://github.com/cstuder/secrethubwarden
#
# Bash script template: https://betterdev.blog/minimal-safe-bash-script-template/
#
# License: MIT


# Bash error setup
set -Eeuo pipefail

# Show usage information
usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v]

Copy secrets from Bitwarden to GitHub repository secrets.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
EOF
  exit
}

# Setup terminal colors
setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    # shellcheck disable=SC2034
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

# Message helper function
msg() {
  echo >&2 -e "${1-}"
}

# Exit helper function
die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "${RED}$msg"
  exit "$code"
}

# Parameter parser
parse_params() {
  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  return 0
}

parse_params "$@"
setup_colors

### secrethubwarden starts here

# Check if bw is installed
if ! [ -x "$(command -v bw)" ]; then
  die "bitwarden-cli is required, but not installed."
fi

# Check if gh is installed
if ! [ -x "$(command -v gh)" ]; then
  die "GitHub CLI gh is required, but not installed."
fi

# Check if jq is installed
if ! [ -x "$(command -v jq)" ]; then
  die "JSON CLI processor jq is required, but not installed."
fi

# Check if there is a .secrethubwarden file in the current directory
if ! [ -f ".secrethubwarden" ]; then
    die "No .secrethubwarden file found in the current directory."
fi

# Check Bitwarden login
msg "${GREEN}Attemping unlocking of the Bitwarden vault."
if ! bw login --check; then
    msg "${ORANGE}Not logged into Bitwarden. Logging in first. (Might be slow)."
    bw login
fi

# Unlock and synchronize the Bitwarden vault
if bw unlock --check; then
    BW_SESSION_ARG=''; # In the case of an existing BW_SESSION environment variable
else
    BW_SESSION_ARG="--session $(bw unlock --raw)"
fi

bw sync "${BW_SESSION_ARG}"

# Check if gh is logged in
if ! gh auth status; then
    msg "${ORANGE}GitHub CLI not authenticated. Logging in first."
    gh auth login
fi

# Read in .secrethubwardenfile

# TODO Validate that all Bitwarden secrets exists and are unique

# TODO Update secrets on GitHub
